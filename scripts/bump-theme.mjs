#!/usr/bin/env node
// Bump all theme folders to content-hashed names and update checked-in mapping.
// Usage: node scripts/bump-theme.mjs

import { existsSync, readFileSync, writeFileSync, renameSync, readdirSync, statSync, createReadStream } from 'node:fs';
import { join, relative } from 'node:path';
import { createHash } from 'node:crypto';

const ROOT = process.cwd();
const THEMES_DIR = join(ROOT, 'public', 'assets', 'themes');
const THEME_TS = join(ROOT, 'src', 'config', 'theme.ts');

function listDirs(dir) {
  return readdirSync(dir, { withFileTypes: true })
    .filter((d) => d.isDirectory())
    .map((d) => d.name)
    .filter((name) => !name.startsWith('.'));
}

function listFilesRecursive(rootDir) {
  const out = [];
  function walk(cur) {
    for (const ent of readdirSync(cur, { withFileTypes: true })) {
      if (ent.name.startsWith('.')) continue;
      const p = join(cur, ent.name);
      if (ent.isDirectory()) walk(p);
      else out.push(p);
    }
  }
  walk(rootDir);
  return out;
}

async function fileHash(path) {
  return await new Promise((resolve, reject) => {
    const h = createHash('sha1');
    const s = createReadStream(path);
    s.on('data', (chunk) => h.update(chunk));
    s.on('error', reject);
    s.on('end', () => resolve(h.digest('hex')));
  });
}

async function dirContentHash(dir) {
  const files = listFilesRecursive(dir)
    .sort((a, b) => a.localeCompare(b));
  const h = createHash('sha1');
  for (const f of files) {
    const rel = relative(dir, f);
    h.update(rel + '\0');
    const fh = await fileHash(f);
    h.update(fh + '\n');
  }
  return h.digest('hex').slice(0, 8);
}

function baseFromName(name) {
  // Use segment before first dash as canonical base (e.g., 'default', 'smooth')
  return name.split('-')[0];
}

async function main() {
  if (!existsSync(THEMES_DIR)) {
    console.error(`Themes directory not found: ${THEMES_DIR}`);
    process.exit(1);
  }
  const dirs = listDirs(THEMES_DIR);
  const mapping = {};

  // Compute hash and rename if needed
  for (const name of dirs) {
    const base = baseFromName(name);
    const fullPath = join(THEMES_DIR, name);
    const hash = await dirContentHash(fullPath);
    const newName = `${base}-${hash}`;
    mapping[base] = newName;
  }

  // Perform renames where necessary (do after mapping so we don't conflict)
  for (const name of dirs) {
    const base = baseFromName(name);
    const desired = mapping[base];
    if (name === desired) continue;
    const from = join(THEMES_DIR, name);
    const to = join(THEMES_DIR, desired);
    if (existsSync(to)) {
      // If target exists but is not same path, we may be rehashing; skip rename
      console.warn(`Target already exists, skipping rename: ${to}`);
      continue;
    }
    renameSync(from, to);
    console.log(`Renamed theme: ${name} -> ${desired}`);
  }

  // Write src/config/theme.ts mapping
  const ordered = Object.keys(mapping).sort();
  const lines = [
    '// This file is auto-generated by scripts/bump-theme.mjs',
    `export const THEMES = {`,
    ...ordered.map((k) => `  ${JSON.stringify(k)}: ${JSON.stringify(mapping[k])},`),
    `} as const;`,
    ``,
    `export const DEFAULT_THEME = THEMES['default'];`,
    ``,
  ];
  writeFileSync(THEME_TS, lines.join('\n') + '\n', 'utf8');
  console.log(`Updated ${THEME_TS}`);
}

main().catch((e) => {
  console.error(e);
  process.exit(1);
});
